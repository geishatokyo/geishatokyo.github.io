---
title: Dockerでアプリケーションをデプロイする
date: 2014-07-22 12:54 JST
tags: docker
authors: yamauchi
---

弊社で開発した「脳トレクエスト2(以下、脳クエ)」のデータを Flask (Python) で書いたサーバで解析しています。  
社内サーバのOS更新に先立って Docker (1.1.1) に移行しました。
実際に移行作業をやってみてハマったことを共有します。

## システム移行の概要

![AnalysisServer](/static/images/2014/07/AnalysisServer.png)

主に下記の3つのサーバから脳クエ解析基盤は構成されています。

* 解析サーバ: Flask (Python 3)  
* Proxyサーバ: Nginx (APP_PORT -> 80)  
* DBサーバ： MySQL (解析済みデータを格納)  

上記のうち、解析サーバを docker コンテナに移行しました。
脳クエアプリサーバのデータは RDS および ログファイルに格納されます。

Ubuntu server OS (物理) の上に解析サーバとProxyサーバ1,2を配置。  
解析サーバのデプロイは rake で実装しました(chef, ansible などの方がいいかも)。
解析サーバは daemontools を使ってプロセスを管理します(元々 daemontools を使っていたので)。  
コンテナは supervisor でプロセスを管理します。
コンテナからホストへの転送ポートはデプロイごとにランダムに生成しています。
Proxy2 が決められたポートへと変換します。

## デプロイ

### Dockerfile

Dockerfile を使ってコンテナイメージを作成(docker build)しています。
Dockerfile は2つに分けてあります。
1つはほとんど変化しない最低限のパッケージのインストールなどを行うもの、
もう1つは残りの部分のセットアップを行うものに分けています。  
Dockerfile を2つに分けた理由は、docker build の実行時間を減らすためです。

ビルドは2つのタイミングで実施するように設定しています。  
1つは git の開発ブランチに merge もしくは push されたタイミングでビルドを実施します。  
もう1つは 定期的に full build (--no-cache オプション付き実行) します。

ビルドが終わったら、イメージを DockerHub もしくは docker-registry に push するか、docker save します。
本プロジェクトでは docker save で運用しています。

### Rakefile

rake コマンドで解析サーバのデプロイを行ってます。
デプロイではコンテナ実行ホストにおいて以下のタスクを実行します。

1. ビルドイメージの展開  
docker load (または docker pull)
2. 新しいコンテナの起動  
ランダムにポートを割り当て supervisor に登録して起動
3. proxy の向き先変更  
古いコンテナから新しいコンテナへ向き先を変える
4. 古いコンテナの停止  
supervisor の管理から古いコンテナのプロセスを外して停止させる
5. 古いコンテナの削除  
古いコンテナを削除する

コンテナ起動後に proxy の向き先変更を行う前に動作テストをすると、もっと確実なシステムとなります。

## トラブルシューティング

### Dockerfile の作成時の問題

* docker build コマンドではなるべく標準入力を使わない  
Dockerfile で ADD, COPY などのコンテナへのファイル転送コマンドを使いたい場合には docker build に標準入力渡し("<")を使えません。標準入力で Dockerfile を渡すと ADD, COPY が機能しないからです。  
```
sudo docker build --rm -t REPOSITORY:TAG .
```  
最後の "." を忘れずに。
ADD, COPY は Dockerfile よりも下位のディレクトリに対して機能するので、必要十分なだけ上位のディレクトリ(例えばプロジェクトのトップなど)に Dockerfile を置くと運用しやすくなります。
* 共有ディレクトリを使う場合にはコンテナとホストの uid, gid を統一する  
コンテナとホストで共有ディレクトリを使う場合には、ディレクトリの所有者に対する制限があります。
共有ディレクトリのユーザID(uid)とグループID(gid)を同じにしておくことが必要です。
ユーザ名、グループ名だけではなくて、それらの uid, gid のことです。
これが合っていないと共有ディレクトリが有効にならないことがあります。
ただし、コンテナの方のユーザがスーパーユーザであれば運用次第では問題を回避できます。
* デーモンプロセスを明示的に管理する  
コンテナを実行しただけでは、通常の Linux OS で init や upstart が実行してくれるデーモンプロセスが起動しません。通常、docker run で渡せるコマンドは 1つです。
ここで supervisor や daemontools のようなプロセス管理システムを起動するようにすれば、コンテナ内で実行する複数のデーモンを簡単に起動できます。
もちろん、プロセス管理システムを使わずにあらかじめ書いておいたスクリプトでデーモンを実行されることも不可能ではありません。  
daemontools の場合には以下のようにコンテナを実行します。  
```
sudo docker run -d -p 8080:8080 -v /path/to/dir:/path/to/dir -t REPOSITORY:TAG /usr/bin/svscanboot
```
* 実行ホストOSはコンテナOSよりも新しくする  
例えば、コンテナOSを Ubuntu 14.04 にして実行ホストOSが Ubuntu 12.04 だった場合に、コンテナが正常に動作しませんでした。
ホストのカーネルがコンテナに対して下位互換性はあるけど、上位互換性はないものと考えられます。
ホスト<コンテナだと問題が発生しますが、コンテナ<=ホストであればおそらく問題ありません。

### コンテナ運用時の問題

* コンテナ自体のプロセスを管理する  
コンテナ自体が不慮の事故や作業ミスで終了してしまう可能性があります。
コンテナ内のデーモンプロセスと同様にプロセス管理システムを使ってコンテナを実行するのがよいでしょう。
本プロジェクトでは supervisor を使って管理しています。
* ポートの割り当て  
デプロイ時に解析サーバ用に実行ホストのポートを動的に割り当てます。
固定ポートにしておくと緩やかに古いコンテナから新しいコンテナへ移行することができません。
ある決めておいた範囲内で空いているポートを探索して割り当てるようにしています。
* docker save/load メタデータ消失問題  
コンテナ作成ホストで docker save によりファイル出力したコンテナイメージを、コンテナ実行ホストで docker load により復元すると、 repository, tag といったメタデータが消失してしまう不具合があります。
docker tag コマンドで消失前の情報を補完することで無理やり解決しました。
今後の docker のバージョンアップで解決されることを期待しています。

### その他の注意点など

* DockerサーバとDockerクライアントのバージョンは合わせる。  
独自インストールした場合に注意すること。パッケージを使ってインストールすれば合わせてあるはず。
* コンテナ作成サーバとコンテナ実行サーバの Docker バージョンも合わせる。  
* docker をアップグレードする。  
ホストOSが Ubuntu の場合には docker.io ではなく docker が配布している lxc-docker の最新版を使うのをオススメします。 
docker.io の docker は執筆時点で未だに 0.9 系になっている。

## ToDo

* OSの更新  
Docker 移行が終わったので OS を Ubuntu 14.04 に更新する予定です。
先ずはホストOSを更新して、次にコンテナのOSの順番ですね。
* ビルドとテスト、デプロイの自動化  
CI&CD でビルドとテスト、デプロイを自動化しようと考えています。構想はできてるので実現したら、またブログに書きます。
